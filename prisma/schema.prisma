// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  //For production
  provider = "postgresql" 
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations

  // For local development
  // provider = "sqlserver"
  // url = env("SQL_SERVER_URL")
}

model Post {
  id        String  @id @default(cuid())
  content   String
  image     String?
  published Boolean @default(false)
  author    User@relation(fields:[authorId], references:[id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  comments  Comment[]
  reactions Reaction[]
}
model Comment {
  id          String  @id @default(cuid())
  post        Post@relation(fields:[postId], references:[id], onDelete: Cascade)
  postId      String
  author      User@relation(fields:[authorId], references:[id], onUpdate: NoAction)
  authorId    String
  content     String
  image       String?
  parent      Comment?@relation("comment_parent", fields:[parentId], references:[id], onUpdate: NoAction, onDelete: NoAction)
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  comments    Comment[]@relation("comment_parent")
}

model Reaction {
  post        Post@relation(fields:[postId], references:[id], onDelete: Cascade)
  postId      String
  author      User@relation(fields:[authorEmail], references:[email], onUpdate: NoAction)
  authorEmail String
  type        Int
  @@id([postId, authorEmail])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @db.Date
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?@unique
  email         String?@unique
  emailVerified DateTime?
  hashedPassword  String?
  image         String?
  isMale        Boolean?
  birthday      DateTime? @db.Date
  schools       UserSchool[]
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  reactions     Reaction[]
  friend1       Friend? @relation("friend_user1")
  friend2       Friend? @relation("friend_user2")
}
model UserSchool {
  id        String @id @default(cuid())
  name      String @unique
  image     String
  users     User[]
  roleId    String?
  role      UserSchoolRole? @relation(fields:[roleId], references:[id]) 
}
model UserSchoolRole {
  id        String @id @default(cuid())
  name      String
  schools   UserSchool[]
}

model Friend {
  id      String  @id @default(cuid())
  user1Id String  @unique
  user2Id String  @unique
  user1   User    @relation("friend_user1", fields:[user1Id], references:[id], onUpdate: NoAction)
  user2   User    @relation("friend_user2", fields:[user2Id], references:[id], onUpdate: NoAction)
  type    Int
  @@unique([user1Id, user2Id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
